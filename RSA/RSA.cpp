#include <iostream>
#include <string>
#include <sstream>
#include "algebra.h"
#include <NTL/ZZ.h>
using namespace std;
using namespace NTL;

string alfabeto="ABCDEFGHIJKLMNOPQRSTUVWXYZ,.-( )abcdefghijklmnopqrstuvwxyz<>*1234567890";
string datos="Pablo Luis Carazas Barrios 201-10-47470 71569511 Daniela Alejandra Chavez Aguilar 201-10-47515 71646137 Paolo Rafael Delgado Vidal 201-10-47577 70671343 Giulia Alexa Naval Fernandez 201-10-47725 74698876 Rodrigo Alonso Torres Sotomayor 201-10-47891 70512744 ";
class RSA {
  ZZ d,p,q,oN;
  public:
  ZZ e,n,eB,nB;
  RSA(long bits){
    Generar_claves(bits);
    cout<<"p:"<<p<<" q:"<<q<<" n:"<<n<<" oN:"<<oN<<" e:"<<e<<" d:"<<d<<endl;
  }
  RSA(ZZ e, ZZ n){
    this->eB=e;
    this->nB=n;
  }
  string cifrado(string m)
    {   ostringstream c,r;
        long num_dig=Num2Str(alfabeto.size()-1).size();
        long k=Num2Str(nB).size()-1;
        ////cifrado mensaje////
        while(divi((m.size()*num_dig),k)!=0)
            m+=' ';
        for (long i=0; i<m.size(); i++){
        long l=alfabeto.find(m[i]);
        c<<Completar0s(l,num_dig);
        }
        string C=c.str();
        string Cifrado="";
        for (long i=0; i<C.size(); i=i+k){
            string bloque=C.substr(i,k);
            ZZ cypher=right2left_binary_modexp(Str2Num(bloque),eB,nB);
            Cifrado+= Completar0s(cypher,k+1);
        }
        /////rúbrica y firma/////
        long k2=Num2Str(n).size()-1;
        string d_F=Completar_datos(datos,k2);
        while(divi((d_F.size()*num_dig),k2)!=0 || divi(((k2+1)*((d_F.size()*num_dig)/k2)),k)!=0){
            d_F+=' ';}
        for (long i=0; i<d_F.size(); i++){
            long l=alfabeto.find(d_F[i]);
            r<<Completar0s(l,num_dig);
        }
        string R=r.str();
        string Rubrica="";
        for (long i=0; i<R.size(); i=i+k2){
            string bloque=R.substr(i,k2);
            ZZ rubric=right2left_binary_modexp(Str2Num(bloque),d,n);
            Rubrica+= Completar0s(rubric,k2+1);
        }
        string Firma="";
        for (long i=0; i<Rubrica.size(); i=i+k){
            string bloque=Rubrica.substr(i,k);
            ZZ signature=right2left_binary_modexp(Str2Num(bloque),eB,nB);
            Firma+= Completar0s(signature,k+1);
        }
        return Cifrado+" "+Firma;
    }
  string descifrado(string m)
    {   long p = m.find(" ");
        string msje= m.substr(0,p);
        string firma=m.substr(p+1,m.size()-1);
        /////Descifrado//////
        string Descifrado="",D="";
        long long num_dig=Num2Str(alfabeto.size()-1).size();
        long long k=Num2Str(n).size();
        for (long long i=0; i<msje.size(); i=i+k){
            string bloque=msje.substr(i,k);
            ZZ decode=Expmod_rchino(Str2Num(bloque),d,n);
            D+= Completar0s(decode,k-1);
        }
        for (long long i=0; i<D.size(); i=i+num_dig){
            string bloque=D.substr(i,num_dig);
            long long pos=Str2Int(bloque);
            char a=alfabeto[pos];
            Descifrado+=a;
        }
        ////Firma y rúbrica/////
        string Rubrica="",F="";
        for (long long i=0; i<firma.size(); i=i+k){
            string bloque=firma.substr(i,k);
            ZZ signature=Expmod_rchino(Str2Num(bloque),d,n);
            F+= Completar0s(signature,k-1);
        }
        string R="";
        long long k2=Num2Str(nB).size();
        for (long long i=0; i<F.size(); i=i+k2){
            string bloque=F.substr(i,k2);
            ZZ rubric=right2left_binary_modexp(Str2Num(bloque),eB,nB);
            R+=Completar0s(rubric,k2-1);
        }
        for (long long i=0; i<R.size(); i=i+num_dig){
            string bloque=R.substr(i,num_dig);
            long long pos=Str2Int(bloque);
            char a=alfabeto[pos];
            Rubrica+=a;
        }
        return Descifrado+" "+Rubrica;
    }
  void Generar_claves(long bits){
    bitz=ZZ(bits);
    exp_bitsminus1=exponenciacion(bits-1);
    expbits=exp_bitsminus1<<1;
    expbits_minus1=expbits-1;
    intervalo=expbits_minus1-exp_bitsminus1+1;
    pyq[0]=p=GenPrimo(bits);//Str2Num("");
    pyq[1]=q=GenPrimo(bits);//Str2Num("");
    while (p==q){
      q=GenPrimo(bits);
    }
    n=p*q;//Str2Num("");
    oN=(p-1)*(q-1);
    e=divi(random_numberBBS(bitz),oN);//Str2Num("");
    ZZ ee=BinaryGCD(e,oN);
    while(ee!=1){
      e=divi(random_numberBBS(bitz),oN);
      ee=BinaryGCD(e,oN);
    }
    d=inversa_1(e,oN);//Str2Num("");
  }
};

int main()
{ ZZ e,n;
  RSA Emisor(128);
  RSA Receptor(128);
  e=Str2Num("");
  n=Str2Num("");
  Emisor.eB=Receptor.e; Emisor.nB=Receptor.n;
  Receptor.eB=Emisor.e; Receptor.nB=Emisor.n;
  string m="El amor es una daga Es un arma que se puede blandir de lejos o de cerca. Puedes reflejarte en ella Es hermosa Hasta que te hace sangrar Pero al final cuando la alcanzas no es real. <El amor es una daga> Terrible metafora";
  //string m="Obi Wan Kenobi dice Tu eras el elegido El que destruiria a los Sith no el que se uniria a ellos Se suponia que ibas a traer el equilibrio a la Fuerza no a hundirla en la oscuridad Darth Vader Te odio Obi Wan Kenobi Eras mi hermano Anakin Yo te queria Fue ahi donde comenzo la triste historia entre Obi Wan Kenobi y Darth Vader Todos los espectadores sueltan una lagrimita";
  string m_C=Emisor.cifrado(m);
  string m_D=Receptor.descifrado(m_C);
  //string m_D=Receptor.descifrado("5470948263187390709454744808443080167715264534727047448823547720596256138285358464389354793630637427747630361947275977741482829245034763064943108574984529332108904982983476711730632440413459897962311768654515672543909578758345164039742604098865754938031208637956081473074884732365740314964043367965969887499358653476154558515436030226390326831587638323510609844266655436537903054896735293281808838256268637617680515903498500376707843936457170433128354314341701837278327506344773209645977013633071389965764202625286418677193034857612887890384687240299920816197588632906657784079493017055919153954251460907576921633382203155324808344398272944564745226635117134421322674725967079702174314010593800902185449837943976220519821601467472252874124715887774610390253644422003502534286835250431789731092759102860581382382329316162776320583275191250957783555011600774921878571069772102105968301692293241409627230707641576135117935312723475924428872914233382651024163508696210835234548798718721049344672229824421196119753706061311939161886257147391407397627188403351363629069609281492763045023120873180821210935360325346365787946867591545912937970783072833388520608264332436156355058354332977209006855045900920952548699212494003082580659501160769548295411552513926583425399580250838321383266033573683852996848179742946634570700851772430119395350868744293409709013436193949964850209997399160098472585971144058759320471493765794364404262327546771871000603000764420156055653795983978532659893508046833166325689540500992251504939576221671846699834837559565117064536619638856910689484258213948000909278463935996266375744709486480171406303586325938358727487483131468136367597565128908258486993549979002352309799610708496441755027541025614988026878386280865599307267542663085257420993720721781697411874219192990665627780232494225991471373599599379709821365583818278395884653966514892152855547781031537465094367396090050834820650146905011074169464656642810415417594150533433247764216654217285562733282222922698040257816988947398758148947503132629715686852894603441172823826739779275832325670856858769984827225830220388336354948004777219873421269051568122862580706291558699181891562357777521189343039646249286398103784463018506419133270814931610662471602529015728166606124365070401414306181499082641899169352369078479948235683540853198332070949250092283696661838667587356314918389706018271383639968619767369648706198693257369148910327904198052623315234691144830402768504189958499269446");
//string m_D=Receptor.descifrado("0280530034713167614846731327086078836730464633845593178348929907972375787793783111036220084137227255437738950828037303986412582339652993727770805046206155523967934547804034613988111834198504653206982546331192296477376472864670738469307724492035569646591548162845041743002752805629041769898951034870205335351114432192853558771312765329424594166210945107140078714134527862244660302002714482599755321954236524340916970555518555348727746899990031309602521174878146455178667628835661557294300742882105392845824575394729793944161296287965121181631881309934607795046797122241453145388439568296740741819767202638175229588523566526286787465039035133054062222604948273126941017169348135330325702383708600598101927764715164549828720193058694612584602947345760289793750851356881622283001886715899149980774069204920286838145267020467217453284651130028094037349964199873574426384507780713289776835519487627834847887286634402634195981855669700519394097100257961577232816819659152114581771662475460120124376904917601969349699733999397352851213776102480609564628948092801747351864122632008793612451761359788528582692048964997582290202919587712764249106032789080957890196464929751739056538212642422633955409936574562820349297756580561072269636070933860422748670128460417459067758666474797948713373912408266946543700530980690274854781922608658086701140069460862222729570278990630723737730068284896154588085562718228560733500555342887612163209250337753428473280052037347098838423517749782763019844177544917202637326827650499602710930551252340029538337823534244241110138730116082578305859348007909842266471983231169726385813152744149156437451789391599646489475116881337551627014703955357617914170655582287422852367328270235200125591429433263954994456335547531142783287461282106906451679847548511964485944232061520827087198896087762118585735830423826274651508043904888379089205451773512436883845069117091934427259025048536140492675224118693251319479542880647164137554778219755422481708368046703961366261720885099743910403811054777585535482056307397557650652876333026755201768426404297280279632912470841480478474757808654318896160193436306681656152204795235149905073047718980424501052745531119452751617145937372364618222080318480180968615677838513954656314854068987794957169854755818491243723819502417765655764250325784861150460380072439514776504835645234377997459840587698311864812358201388851241047588247507901843895157601912882192986927601625413908224847605281740355028645401507881058");
    //string m_D=Receptor.descifrado("1914603004259921027389809650319435860974215154310162351464318870591697444979768516455014189833247378290618114915775113643531616139186396946137030035018337430283227969853239475349670212345310618597706128312163245339093608686908814756824268793392236159348805477374290305652524010129109604132323204904405995674447173377865844068509743473092321668191862582354314479001403874010908066127498881582870995008957764864233070269807422097002471392430950868529079693862590640639748705620657313614356554416869098757518526156586534203280084425957000300081790993896195586650318452677928002666955592748547576674839692020300192225468459323450888025666918045374635091997368923820270084067824975787607912769283464609370187850671469116150088826558627290172971923687473379008752777983658277006516555224029420970271872193011447053580646079414215516957717689695810224357872544757634503641591138515276881244544063804678200757106207011682364903345393408436154734044920017132136626217888938704200078069123105467462840602436551017082193487399776045530230649656799167094518954643539923642557983089834346466134164275676151016679481448440613403286774047012436896543735440326634382567009719818251437837792348601425175010597565349840666650763880704699104036329328009704263351270020309966335276147566581229751507300024170519771058266196312060612668241927726801648035438609174000974058227189283657049976247305293058754026399650900299953649574711509710679713084538858978816256253027678031076610634681694603578070663813803918765991500050904051793040399758491571309198790083490500329726684990939983655278699339236777653360578333604699834432244179808431590054134532521727610687894792712140356604822112652352554468094185417486796500631954527963189724931553213816757622474003359619760197942398377778362657661970349581220046594007372161172347342048024095347447016025717202731671084863899862013446818328507554916551310015656589260884009859542952576013564754239269404353941680789248263092418652258302091413541929547871186107602803996167928957308595295040984652795678024334624883716378594383639884349433277583754071912418014533387186732768985036496418505654024100029953610095492049902938511206695021704231782504045134224386622890706841842282158587439022507268680218330797171854642164950104638849855395628905855415265384826870036395749886777374441076093299027028461716169356049230723200750403448306387109700739179409444890400156757330983917423034043812290520273497818071051832699630344738795540702064945720503");
  cout<<m_C<<endl;
  cout<<m_D<<endl;

}
